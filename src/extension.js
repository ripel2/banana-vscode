const vscode = require('vscode');
const fs = require('fs');
const {getSeverityAsVSCode, getReportErrorRange, fileIsInGitignore, getCurrentDateAsString} = require('./utils.js');
const {startCommand} = require('./system.js');
const {checkDockerGroup, checkDockerIsInstalled} = require('./checks.js');
const {getAllProjectFiles} = require('./filesystem.js');
// @ts-ignore
const codingStyleExtractData = require('../epitech_c_coding_style.json')

const bananaDiagnosticCollection = vscode.languages.createDiagnosticCollection('banana-coding-style');

const DOCKER_IMAGE_URL = 'ghcr.io/epitech/coding-style-checker:latest';

/**
 * Processes a line from the report file and shows it in the editor diagnostics
 * @param {string} file The file path
 * @param {number} line The line number
 * @param {string} severity The severity of the error (MAJOR, MINOR, INFO)
 * @param {string} language The language of the error (C)
 * @param {string} subgroup The subgroup of the error
 * @param {Object} projectFile The project file object containing the file path and the file contents.
 */
function processReportError(file, line, severity, language, subgroup, projectFile) {
	let configuration = vscode.workspace.getConfiguration('banana-vscode');
	let range = getReportErrorRange(file, line, severity, language, subgroup, projectFile);
	let severityVSC = getSeverityAsVSCode(severity);
	let fullCode = `${language}-${subgroup}`;
	let message = fullCode; // default value if the error is not in the json

	for (let rule of codingStyleExtractData) {
		if (rule.subgroup === subgroup && rule.language === language) {
			message = rule.content.join("\n");
			break;
		}
	}

	if (subgroup === "O1" && configuration.ignoreFilesInGitignore === "O1 only" && fileIsInGitignore(file)) {
		return;
	}

	let diagnostic = new vscode.Diagnostic(range, message, severityVSC);
	diagnostic.code = fullCode;
	diagnostic.source = 'Banana';

	let diagnostics = vscode.languages.getDiagnostics(vscode.Uri.file(file));
	diagnostics.push(diagnostic);

	bananaDiagnosticCollection.set(vscode.Uri.file(file), diagnostics);
}

/**
 * Processes the report file to display results in the editor.
 * @param {Buffer} reportFile The report file generated by Banana.
 * @param {Map} projectFileMap The project file map generated for the current project.
 */
function processReportFile(reportFile, projectFileMap) {
	let configuration = vscode.workspace.getConfiguration('banana-vscode');
	const deliveryDir = `${vscode.workspace.workspaceFolders[0].uri.path}`;
	const errorRegex = new RegExp('(.*):([0-9]{0,4}): (MAJOR|MINOR|INFO):(C)-(.[0-9]{1,3})', 'gm');
	let fileContent = reportFile.toString()
	var match;

	while ((match = errorRegex.exec(fileContent)) !== null) {
		// eslint-disable-next-line no-unused-vars
		let [_, file, lineStr, severity, language, subgroup] = match;
		let line = parseInt(lineStr);
		let projectFile = projectFileMap.get(file);

		file = deliveryDir + file.substring(1);
		if (configuration.ignoreFilesInGitignore === "true" && fileIsInGitignore(file)) {
			continue;
		}
		processReportError(file, line, severity, language, subgroup, projectFile);
	}
}

/**
 * Processes all the reports files generated by Banana.
 * @param {string} reportsDir 
 * @param {Array<Object>} projectFiles 
 */
function processAllReportFiles(reportsDir, projectFiles) {
	var projectFileMap = new Map();
	for (let file of projectFiles) {
		projectFileMap.set(file.relativePath, file);
	}

	fs.readdirSync(reportsDir).forEach(file => {
		let fileObj = fs.readFileSync(`${reportsDir}/${file}`);

		processReportFile(fileObj, projectFileMap);
	});
}

/**
 * Starts the check by pulling the official docker image and running it.
 * @returns {void}
 */
function startBanana() {
	if (vscode.workspace.workspaceFolders === undefined) {
		vscode.window.showErrorMessage("Banana: no workspace opened");
		return;
	}
	let configuration = vscode.workspace.getConfiguration('banana-vscode');
	const deliveryDir = `${vscode.workspace.workspaceFolders[0].uri.path}`;
	var reportsDir = `${deliveryDir}/banana_reports/}`;
	var projectFiles = getAllProjectFiles(deliveryDir);
	
	if (configuration.keepReports) {
		reportsDir = `${deliveryDir}/banana_reports/${getCurrentDateAsString()}`;
	}
	vscode.window.withProgress({
		location: vscode.ProgressLocation.Notification,
	}, async (progress) => {
		var error;
		await startCommand(`mkdir -p "${reportsDir}"`);
		await startCommand(`chmod -R 777 "${reportsDir}"`);

		progress.report({ message: 'Running banana...' });
		await startCommand(`docker run --rm -i -v "${deliveryDir}":"/mnt/delivery" -v "${reportsDir}":"/mnt/reports" ${DOCKER_IMAGE_URL} "/mnt/delivery" "/mnt/reports"`)
		.catch((err) => {
			vscode.window.showErrorMessage("Banana failed: " + err);
			error = err;
		});
		if (error !== undefined) {
			console.error(error);
			return;
		}
		
		bananaDiagnosticCollection.clear();
		processAllReportFiles(reportsDir, projectFiles);
		if (configuration.keepReports) {
			vscode.window.showInformationMessage(`Banana: report generated in ${reportsDir}`);
		} else {
			await startCommand(`rm -rfd "${reportsDir}"`);
		}
	});
}

/**
 * Removes all coding style errors currently displayed in VSCode.
 * @returns {void}
 */
function clearAllBananaErrors() {
	bananaDiagnosticCollection.clear();
}

/**
 * Pulls the latest docker image from the official repository.
 */
function pullLatestDockerImage() {
	vscode.window.withProgress({
		location: vscode.ProgressLocation.Notification,
		title: 'Banana',
	}, async (progress) => {
		progress.report({ message: 'Pulling latest docker image...' });
		await startCommand(`docker pull ${DOCKER_IMAGE_URL} && docker image prune -f`)
		.then(() => {
			progress.report({ message: 'Pulled latest docker image', increment: 100 });
		})
		.catch((err) => {
			console.error(err);
			progress.report({ message: 'Failed to pull latest docker image', increment: 0 });
		});

		await new Promise(resolve => setTimeout(resolve, 4000));
	});
}

function activate(context) {
	let startBananaDisp = vscode.commands.registerCommand('banana-vscode.startBanana', startBanana);
	let clearBananaDisp = vscode.commands.registerCommand('banana-vscode.clearAllBananaErrors', clearAllBananaErrors);

	context.subscriptions.push([clearBananaDisp, startBananaDisp]);
	checkDockerIsInstalled();
	checkDockerGroup();
	pullLatestDockerImage();
}

function deactivate() {

}

module.exports = {
	activate,
	deactivate
}
